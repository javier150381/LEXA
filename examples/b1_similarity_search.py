"""Example using vectorstore.similarity_search with B1 embeddings.

This script builds a small FAISS vectorstore using OpenAI's
``text-embedding-3-small`` model (B1 level) and demonstrates similarity
search for the queries "airport security" and "job interview".
It also generates a comprehension question for the top matching
document using GPT-4.
"""

from langchain_community.vectorstores import FAISS
from langchain_openai import ChatOpenAI, OpenAIEmbeddings

# Sample corpus in English at approximately B1 level
CORPUS = [
    "Airport security includes scanning luggage and verifying passenger identities to ensure safety.",
    "A job interview is a conversation in which an applicant discusses their skills with a potential employer.",
    "Public libraries offer free access to books and community events for everyone.",
]

# Create embeddings and build the vectorstore
embeddings_b1 = OpenAIEmbeddings(model="text-embedding-3-small")
vectorstore = FAISS.from_texts(CORPUS, embeddings_b1)

def search_and_ask(query: str):
    """Return top document and a comprehension question generated by GPT-4."""
    docs = vectorstore.similarity_search(query, k=1)
    content = docs[0].page_content if docs else ""
    llm = ChatOpenAI(model="gpt-4", temperature=0)
    prompt = (
        "Generate one short comprehension question in English about the following text:\n" + content
    )
    question = llm.invoke(prompt).content.strip()
    return docs, question

if __name__ == "__main__":
    for query in ("airport security", "job interview"):
        docs, question = search_and_ask(query)
        print(f"Query: {query}")
        if docs:
            print("Top match:", docs[0].page_content)
        print("Comprehension question:", question)
        print()
